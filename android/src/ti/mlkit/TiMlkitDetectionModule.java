/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.mlkit.objectdetection;

import android.graphics.Bitmap;
import android.graphics.Rect;

import com.google.mlkit.vision.common.InputImage;
import com.google.mlkit.vision.objects.DetectedObject;
import com.google.mlkit.vision.objects.ObjectDetection;
import com.google.mlkit.vision.objects.ObjectDetector;
import com.google.mlkit.vision.objects.defaults.ObjectDetectorOptions;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;


@Kroll.module(name = "TiMlkitDetection", id = "ti.mlkit.objectdetection")
public class TiMlkitDetectionModule extends KrollModule {

    public TiMlkitDetectionModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void detect(KrollDict kd) {
        if (kd.containsKeyAndNotNull("image")) {
            Bitmap bitmap = TiConvert.toBlob(kd.get("image")).getImage();

            ObjectDetectorOptions options =
                    new ObjectDetectorOptions.Builder()
                            .setDetectorMode(ObjectDetectorOptions.SINGLE_IMAGE_MODE)
                            .enableMultipleObjects()
                            .enableClassification()  // Optional
                            .build();

            ObjectDetector objectDetector = ObjectDetection.getClient(options);
            InputImage image = InputImage.fromBitmap(bitmap, 0);
            objectDetector.process(image)
                    .addOnSuccessListener(
                            detectedObjects -> {
                                KrollDict returnValue = new KrollDict();
                                KrollDict[] returnValueList = new KrollDict[detectedObjects.size()];
                                int idxObj = 0;
                                for (DetectedObject detectedObject : detectedObjects) {
                                    KrollDict[] obj = new KrollDict[detectedObject.getLabels().size()];
                                    Rect boundingBox = detectedObject.getBoundingBox();
                                    Integer trackingId = detectedObject.getTrackingId();
                                    int idx = 0;
                                    for (DetectedObject.Label label : detectedObject.getLabels()) {
                                        obj[idx] = new KrollDict();
                                        KrollDict kdLabel = new KrollDict();
                                        kdLabel.put("text", label.getText());
                                        kdLabel.put("index", label.getIndex());
                                        kdLabel.put("confidence", label.getConfidence());
                                        obj[idx].put("label", kdLabel);
                                        idx++;
                                    }
                                    returnValueList[idxObj] = new KrollDict();
                                    returnValueList[idxObj].put("object", obj);
                                    returnValueList[idxObj].put("left", boundingBox.left);
                                    returnValueList[idxObj].put("top", boundingBox.top);
                                    returnValueList[idxObj].put("bottom", boundingBox.bottom);
                                    returnValueList[idxObj].put("right", boundingBox.right);
                                    returnValueList[idxObj].put("trackingId", trackingId);
                                    idxObj++;
                                }
                                returnValue.put("data", returnValueList);
                                fireEvent("detected", returnValue);
                            })
                    .addOnFailureListener(
                            e -> {
                            });
        }
    }


}
